/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package railwaystation;

/**
 *
 * @author illya
 */
import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.util.ArrayList;
import com.itextpdf.text.Chunk;


public class FirstPdf {
        private static String FILE = "/home/illya/Report.pdf";
        public static final String FONT = "/home/illya/ttt.ttf";
        private static Font font25 = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, 25);
        private static Font font20 = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, 20);
        private static Font font15 = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, 15);
        private static Font font10 = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, 10);
        //private static BaseFont helvetica = BaseFont.createFont("/home/illya/ttt.ttf", BaseFont.WINANSI);
        //private static Font font = new Font(helvetica, 10, Font.NORMAL);
        private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                        Font.BOLD);
        private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.NORMAL, BaseColor.RED);
        private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                        Font.BOLD);
        private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.BOLD);
        //private static Font times = Font.createFont("c:/windows/fonts/times.ttf","cp1251",BaseFont.EMBEDDED);

        public static void main(ArrayList<Vacation> vac,ArrayList<Medical> med,ArrayList<Doc> doc,FullWorker fw,Time tim,Stuff stf,Stuffl stfl,float sal,int hou) {
                try {
                        Document document = new Document();
                        PdfWriter.getInstance(document, new FileOutputStream(FILE));
                        document.open();
                        addMetaData(document);
                        addTitlePage(document);
                        //addContent(document);
                        addPersonal(document,fw,sal,hou);
                        addWorker(document,stf,stfl);
                        addTime(document,tim);
                        addVacation(document, vac);
                        addDocument(document,doc);
                        addMedical(document, med);
                        document.close();
                } catch (Exception e) {
                        e.printStackTrace();
                }
        }

        // iText allows to add metadata to the PDF which can be viewed in your Adobe
        // Reader
        // under File -> Properties
        private static void addMetaData(Document document) {
                document.addTitle("Report");
                //document.addSubject("Using iText");
                //document.addKeywords("Java, PDF, iText");
                document.addAuthor("Illya Barziy");
                //document.addCreator("Lars Vogel");
        }

        private static void addTitlePage(Document document)
                        throws DocumentException {
                Paragraph preface = new Paragraph();
                // We add one empty line
                addEmptyLine(preface, 1);
                // Lets write a big header
                preface.add(new Paragraph("Звіт працівника", font25));
                
                //addEmptyLine(preface, 1);
                // Add time of raport
                preface.add(new Paragraph(
                                "Звіт зроблено:" + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                                font15));
                addEmptyLine(preface, 1);
                
                addEmptyLine(preface, 1);
                /*
                // Will create: Report generated by: _name, _date
                preface.add(new Paragraph(
                                "Особисті дані:" + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                                smallBold));
                
                addEmptyLine(preface, 3);
                preface.add(new Paragraph(
                                "This document describes something which is very important ",
                                smallBold));

                addEmptyLine(preface, 8);

                preface.add(new Paragraph(
                                "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
                                redFont));
                */
                document.add(preface);
                // Start a new page
                //document.newPage();
                
        }
        
        private static void addPersonal(Document document,FullWorker fw,float sal, int hou) throws DocumentException {
                Anchor anchor = new Anchor("Персональні Дані", font20);
                anchor.setName("Персональні Дані");
                document.add(new Chunk("Персональні Дані",font20));
                // Second parameter is the number of the chapter
                //Chapter catPart = new Chapter(new Paragraph(anchor), 1);
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Прізвище: " + fw.getLastName(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Ім'я: " + fw.getFirstName(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("По-батькові: " + fw.getFathersName(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("День народження: " + fw.getBirthday(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Дата виходу на роботу: " + fw.getFirstWork(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Телефон: " + fw.getTelephone(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Адреса: " + fw.getAdress(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Електронна пошта: " + fw.getMail(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Годин відпрацьовано: " + hou,font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Грошей зароблено: " + sal,font15));
                document.add( Chunk.NEWLINE );
                document.add( Chunk.NEWLINE );
                //document.add(catPart);
        }
        
        private static void addWorker(Document document,Stuff stf,Stuffl stfl) throws DocumentException {
                Anchor anchor = new Anchor("Робочі Дані", font20);
                anchor.setName("Робочі Дані");
                document.add(new Chunk("Дані працівника",font20));
                // Second parameter is the number of the chapter
                //Chapter catPart = new Chapter(new Paragraph(anchor), 1);
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Номер працівника: " + stf.getIdPaper(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Дата прийняття на роботу: " + stf.getDateStart(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Дата закінчення роботи: " + stf.getDateEnd(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Заробітна платня: " + Float.toString(stf.getSalary()),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Відділ: " + stfl.getNameDepartment(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Посада: " + stfl.getNamePosition(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Мінімальна заробітна платня: " + Float.toString(stfl.getMinSalary()),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Максимальна заробітна платня: " + Float.toString(stfl.getMaxSalary()),font15));
                document.add( Chunk.NEWLINE );
                document.add( Chunk.NEWLINE );
                //document.add(catPart);
        }
        
        //Here all the magic happens
        private static void addTime(Document document,Time tim) throws DocumentException {
                Anchor anchor = new Anchor("Графік роботи", font20);
                anchor.setName("Графік роботи");
                document.add(new Chunk("Графік роботи",font20));
                // Second parameter is the number of the chapter
                //Chapter catPart = new Chapter(new Paragraph(anchor), 1);
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Понеділок: " + tim.getMs() + " - " + tim.getMe(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Вівторок: " + tim.getTs() + " - " + tim.getTe(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Середа: " + tim.getWs() + " - " + tim.getWe(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Четвер: " + tim.getThs() + " - " + tim.getThe(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("П'ятниця: " + tim.getFs() + " - " + tim.getFe(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Субота: " + tim.getSs() + " - " + tim.getSe(),font15));
                document.add( Chunk.NEWLINE );
                document.add(new Chunk("Неділя: " + tim.getSus() + " - " + tim.getSue(),font15));
                document.add( Chunk.NEWLINE );
                document.add( Chunk.NEWLINE );
            
      

        }

        private static void addVacation(Document document,ArrayList<Vacation> vac) throws DocumentException {
                Anchor anchor = new Anchor("Відпускні", font20);
                anchor.setName("Відпускні");
                document.add(new Chunk("Відпускні",font20));
                document.add( Chunk.NEWLINE );
                for(int i = 0; i < vac.size(); i++)
                {
                    document.add(new Chunk("Початок відпустки: " + vac.get(i).getStartDate() + " Кінець відпустки: " + vac.get(i).getEndDate(),font15));
                    document.add( Chunk.NEWLINE );
                    document.add(new Chunk("Тип відпустки: " + vac.get(i).getVacationType(),font15));
                    document.add( Chunk.NEWLINE );
                    document.add( Chunk.NEWLINE );

                }

        }
        
        private static void addDocument(Document document,ArrayList<Doc> doc) throws DocumentException {
                Anchor anchor = new Anchor("Документи", font20);
                anchor.setName("Документи");
                document.add(new Chunk("Документи",font20));
                document.add( Chunk.NEWLINE );
                for(int i = 0; i < doc.size(); i++)
                {
                    document.add(new Chunk("Дата створення: " + doc.get(i).getDate(),font15));
                    document.add( Chunk.NEWLINE );
                    document.add(new Chunk("Тип документу: " + doc.get(i).getType(),font15));
                    document.add( Chunk.NEWLINE );
                    document.add(new Chunk("Опис: " + doc.get(i).getDescr(),font15));
                    document.add( Chunk.NEWLINE );
                    document.add( Chunk.NEWLINE );

                }

        }
        
        private static void addMedical(Document document,ArrayList<Medical> med) throws DocumentException {
                Anchor anchor = new Anchor("Мед. огляди", font20);
                anchor.setName("Мед. огляди");
                document.add(new Chunk("Мед. огляди",font20));
                document.add( Chunk.NEWLINE );
                for(int i = 0; i < med.size(); i++)
                {
                    document.add(new Chunk("Дата огляду: " + med.get(i).getInspectionDate(),font15));
                    document.add( Chunk.NEWLINE );
                    document.add(new Chunk("Результат: " + med.get(i).getResult(),font15));
                    document.add( Chunk.NEWLINE );
                    document.add( Chunk.NEWLINE );

                }

        }
        
        private static void createTable(Section subCatPart)
                        throws BadElementException {
                PdfPTable table = new PdfPTable(3);

                // t.setBorderColor(BaseColor.GRAY);
                // t.setPadding(4);
                // t.setSpacing(4);
                // t.setBorderWidth(1);

                PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);

                c1 = new PdfPCell(new Phrase("Table Header 2"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);

                c1 = new PdfPCell(new Phrase("Table Header 3"));
                c1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(c1);
                table.setHeaderRows(1);

                table.addCell("1.0");
                table.addCell("1.1");
                table.addCell("1.2");
                table.addCell("2.1");
                table.addCell("2.2");
                table.addCell("2.3");

                subCatPart.add(table);

        }

        private static void createList(Section subCatPart) {
                List list = new List(true, false, 10);
                list.add(new ListItem("First point"));
                list.add(new ListItem("Second point"));
                list.add(new ListItem("Third point"));
                subCatPart.add(list);
        }

        private static void addEmptyLine(Paragraph paragraph, int number) {
                for (int i = 0; i < number; i++) {
                        paragraph.add(new Paragraph(" "));
                }
        }
}